#!/usr/bin/python

"""X509 Encryption Utility

Usage:
    x509crypt_cmd encrypt <certificate_or_private_key> <input_file> <output_file>
    x509crypt_cmd decrypt [--password=<password>] <certificate_or_private_key> <input_file> <output_file>

Options:
    --password=<password>   Password used to decrypt the private key
"""
from docopt import docopt
from x509crypt.asymmetric import AsymmetricContext
from x509crypt.symmetric import encrypt, decrypt
from x509crypt.encoder import write_header, read_header, open_writer_helper
from sys import stdout
from os import urandom
import logging

def main():
    """Encrypt or decrypt files using the x509crypt library."""
    args = docopt(__doc__, version="x509crypt_cmd 1.0")
    logging.basicConfig(level=logging.INFO, stream=stdout, format="%(message)s")
    asymmetric_material = args["<certificate_or_private_key>"]
    if args["encrypt"]:
        asymmetric_context_mgr = lambda: AsymmetricContext.from_certificate(asymmetric_material)
    elif args["decrypt"]:
        asymmetric_context_mgr = lambda: AsymmetricContext.from_private_key(asymmetric_material, password=args["--password"])
    with asymmetric_context_mgr() as asymmetric_context, \
            open_writer_helper(args["<output_file>"]) as output_handle, \
            open(args["<input_file>"]) as input_handle:
        if args["encrypt"]:
            symmetric_iv = urandom(16)
            symmetric_key = urandom(32)
            encrypted_symmetric_key = asymmetric_context.encrypt(symmetric_key)
            write_header(output_handle, symmetric_iv, encrypted_symmetric_key)
            encrypt(symmetric_iv, symmetric_key, input_handle, output_handle)
            logging.info("Wrote encrypted data to %s", "stdout" if args["<output_file>"] == "-" else args["<output_file>"])
        else:
            symmetric_iv, encrypted_symmetric_key = read_header(input_handle)
            symmetric_key = asymmetric_context.decrypt(encrypted_symmetric_key)
            decrypt(symmetric_iv, symmetric_key, input_handle, output_handle)
            logging.info("Wrote decrypted data to %s", "stdout" if args["<output_file>"] == "-" else args["<output_file>"])

if __name__ == "__main__":
    main()
